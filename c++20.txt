bubble sort:
pseudo code:
for i=0 to n-1
for j=0 to n-i-1
if(a[j]>a[j-1])
temp=a[j]
a[j]=a[j+1]
a[j+1]=temp
end if
end for
end for
code:
#include <iostream>

using namespace std;

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
            }
        }
    }
     for(int i=0;i<n;i++){
        cout<<arr[i];
    }
}
input:
5
5
1
2
4
3
output:
12345

selection code:
for i=0 to n-1 do:
smallsub=1
for j=i+1 to n-1 do:
if a[j]<a[smallsub]
smallsub=j
end-if
end for
temp=a[i]
a[i]=a[smallsub]
smallsub=temp
end for

code:
#include<stdio.h>
 
int main()
{
    int i,j,n,loc,temp,min,a[30];
    printf("Enter the number of elements:");
    scanf("%d",&n);
    printf("\nEnter the elements\n");
 
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
 
    for(i=0;i<n-1;i++)
    {
        min=a[i];
        loc=i;
        for(j=i+1;j<n;j++)
        {
            if(min>a[j])
            {
                min=a[j];
                loc=j;
            }
        }
 
        temp=a[i];
        a[i]=a[loc];
        a[loc]=temp;
    }
 
    printf("\nSorted list is as follows\n");
    for(i=0;i<n;i++)
    {
        printf("%d ",a[i]);
    }
 
    return 0;
}
input:
5
1
3
2
4
5
output:
Enter the number of elements:
Enter the elements

Sorted list is as follows
1 2 3 4 5 

insertion sorting:
pseudo code:
for i=1 to n-1
j=i;
while (j>0) and a[j]a[j-1]
temp=(a[j])
a[j]=a[j-1]
a[j-1]=temp
j=j-1
end while
end for

code:
#include <iostream>

using namespace std;

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    for(int i=1;i<n;i++){
        int j=i;
        while(j>0 &&arr[j-1]>arr[j]){
            swap(arr[j-1],arr[j]);
            j--;
        }
    }
     for(int i=0;i<n;i++){
        cout<<arr[i];
    }
}

input:
5
5
1
2
4
3
output:
12345

QUICK SORT
best:
O(n log(n))
average:
O(n log(n))
worst:
O(n^2)

code:
#include <iostream>
using namespace std;

int partition(int arr[],int lo,int hi){
    int pivot=arr[lo],lowerwall=lo;
    for(int i=lo+1;i<=hi;i++){
        if(arr[i]<pivot){
            swap(arr[i],arr[lowerwall+1]);
            lowerwall++;
        }
    }
    swap(arr[lowerwall],arr[lo]);
    return lowerwall;
}

void quick_sort(int arr[],int lo,int hi){
    if(hi>lo){
        int part=partition(arr,lo,hi);
        quick_sort(arr,lo,part-1);
        quick_sort(arr,part+1,hi);
    }
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    quick_sort(arr,0,n-1);
    for(int i=0;i<n;i++)
    cout<<arr[i]<<" ";
}

input:
5
4 1 5 2 3
output:
1 2 3 4 5

merge sort:
best,average,worst:O(n log(n))
code:
// https://i...content-available-to-author-only...e.com/6du8Ba




#include <iostream>
using namespace std;

void merge(int arr[],int lo,int mid,int hi){
    int left=mid-lo+1,right=hi-mid,l[left],r[right];
    for(int i=lo;i<=mid;i++)
    l[i-lo]=arr[i];
    for(int i=mid+1;i<=hi;i++)
    r[i-mid-1]=arr[i];
    int indl=0,indr=0,curr=lo;
    while(curr<=hi){
        if(indl==left){
            while(curr<=hi){
                arr[curr]=r[indr];
                curr++;
                indr++;
            }
        } else if(indr==right){
            while(curr<=hi){
                arr[curr]=l[indl];
                curr++;
                indl++;
            }
        } else if(l[indl]<r[indr]){
            arr[curr]=l[indl];
            curr++;
            indl++;
        } else {
            arr[curr]=r[indr];
            curr++;
            indr++;
        }
    }
}

void merge_sort(int arr[],int lo,int hi){
    if(hi>lo){
        int mid=(hi+lo)/2;
        merge_sort(arr,lo,mid);
        merge_sort(arr,mid+1,hi);
        merge(arr,lo,mid,hi);
    }
}
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    merge_sort(arr,0,n-1);
    for(int i=0;i<n;i++)
    cout<<arr[i]<<" ";
}
input:
5
5 4 3 2 1
output:
1 2 3 4 5

Take an array of integers. Separate the integers based on even and odd.and place the odd numbers in front with decresing order and eve numbers in end with acending order.
code:
#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    vector<int>odd,even;
    for(int i=0;i<n;i++){
        if((arr[i]%2)==0)
        even.push_back(arr[i]);
        else
        odd.push_back(arr[i]);
    }
    sort(even.begin(),even.end());
    sort(odd.begin(),odd.end());
    reverse(odd.begin(),odd.end());
    vector<int> :: iterator it;
    for(auto it:odd)
    cout<<it<<" ";
    for(auto it:even)
    cout<<it<<" ";
    
}
input:
7
1 2 3 5 4 7 10
output:
7 5 3 1 2 4 10 

comparator method:
// https://i...content-available-to-author-only...e.com/pclpoC

#include <bits/stdc++.h>
using namespace std;

bool cmp(int a,int b){
    if(a%2!=b%2)
       return (a%2>b%2);
    if(a%2==1)
       return (a>b);
    return (a<b);
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    sort(arr,arr+n,cmp);
    for(int i=0;i<n;i++)
        cout<<arr[i]<<" ";
}
input:
7
1 2 3 5 4 7 10
output:
7 5 3 1 2 4 10 

given an array of integes having distinct elements the task surpasser count ofeach element in array.
in other woeds for each element of the array ,find its surpasser count i.e.count the number of elements to the right that are greater then that element.

code:
#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    int count=0;
    for(int i=0;i<n;i++){
        cin>>a[i];
        for(int j=i+1;j<n;j++){
            if(a[i]<a[j]){
                count ++;
                cout<<a[i]<<"="<<count<<endl;
            }
           
        }
        count=0;
    }
}
input:
7
2 4 7 3 1 5 6
output:
7
2 4 7 3 1 5 6
other:
#include <bits/stdc++.h>

using namespace std;

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    for(int i=0;i<n;i++){
        int ans=0;
        for(int j=i+1;j<n;j++){
            if(arr[i]<arr[j])
            ans++;
        }
        cout<<ans<<" ";
    }
}
input:
7
2 4 7 3 1 5 6
output:
5 3 0 2 2 1 0

we are given an array of N integers.The task is to find peak element in A in O(log n).
An array element is peak if it is greater than its neighbours.For corner elements consider only one corner.
if peak element is found print 1,else print0.
input:
N=3
A[]={1,2,3}
output:1
explanation:
in the given array, 3 is peak element as it is greater than its elements.
code:
#include <bits/stdc++.h>

using namespace std;

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    if(arr[0]>arr[1]){
        cout<<"1";
    }
    else{
        cout<<"0";
    }
    for(int i=1;i<n-1;i++){
       if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
           cout<<"1";
       }
       else{
           cout<<"0";
       }
    }
    if(arr[n]>arr[n-1]){
        cout<<"1";
    }
    else{
        cout<<"0";
    }
}

input:
7
2 4 7 3 1 5 6

output:
0010001
other:


given an array with distinct elements print the k th smallest element of the array,here k is smaller than size of array.
code:
#include <bits/stdc++.h>

 

using namespace std;

 

int main() {

    int n,k;

    cin>>n>>k;

    int a[n];

    for(int i=0;i<n;i++){

        cin>>a[i];

    }

    sort(a,a+n);

    cout<<a[k-1];

}
